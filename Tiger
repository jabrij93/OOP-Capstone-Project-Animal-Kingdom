import java.awt.*;
import java.util.Random;

public class Tiger extends Critter {
    private int colourMoves;
    public static Random rand = new Random();
    Color tigerColor;
    //    public static String[] colors = {"Color.RED", "Color.GREEN", "Color.BLUE"};
    public static int tigerMove = 0;
    public static int countMove = 0;

    public Tiger() {
        colourMoves = 0; //1,2,3
        getColor();
    }

    @Override
    public Color getColor() {
        // Randomly picks one of three colors (Color.RED, Color.GREEN, Color.BLUE) and uses that color for three moves,
        // then randomly picks one of those colors again for the next three moves,
        // then randomly picks another one of those colors for the next three moves, and so on.
        if (colourMoves % 3 == 0) {
            int x = 0;
            while (x <= 2) {
                int i = rand.nextInt(3); // 0. Red, 1. Green, 2. Black
                if (i == 0 && this.tigerColor != Color.RED) {
                    this.tigerColor = Color.RED;
                    x++;
                }
                if (i == 1 && this.tigerColor != Color.GREEN) {
                    this.tigerColor = Color.GREEN;
                    x++;
                }
                if (i == 2 && this.tigerColor != Color.BLACK) {
                    this.tigerColor = Color.BLACK;
                    x++;
                }
            }
        }
        return tigerColor;
    }
//    public Color getColor() {
//        int rand;
//        if(colourMoves%3==0){
//            rand=(int) (Math.random()*2);
//            if(rand==0){
//                tigerColor=Color.RED;
//            }
//            if(rand==1){
//                tigerColor=Color.BLUE;
//            }
//            if(rand==2){
//                tigerColor=Color.GREEN;
//            }
//        }
//        return tigerColor;
//
//    }



    public String toString() {
        return "TGR";
    }

    @Override
    public Action getMove(CritterInfo info) {
        if (info.getFront() == Neighbor.OTHER) {
            return Action.INFECT;
        } else if (info.getFront() == Neighbor.WALL || info.getRight() == Neighbor.WALL) {
            return Action.LEFT;
        } else if (info.getFront() == Neighbor.SAME) {
            return Action.RIGHT;
        } else {
            return Action.HOP;
        }
    }
}

//    public Color getColor() {
//        Random rand = new Random();
//        int index = rand.nextInt(colors.length);
//        for (int i=0; i<3; i++) {
//            System.out.println(colors[index]);
//            return rand.nextInt(colors.length);
//        }
